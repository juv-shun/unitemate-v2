org: fukusumi
app: unitemate-v2
service: unitemate-v2

provider:
  name: aws
  region: ap-northeast-1
  runtime: python3.12
  stackName: ${sls:stage}-${self:service}-stack
  timeout: 30
  deploymentBucket:
    name: juv-shun.sls-deployment-store
    maxPreviousDeploymentArtifacts: 3
  logRetentionInDays: 7
  endpointType: REGIONAL
  httpApi:
    cors:
      allowedOrigins:
        - ${env:FRONTEND_URL}
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowCredentials: true
  iam:
    role:
      name: ${self:service}-role-${sls:stage}
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !GetAtt UsersTable.Arn
            - !Join ["", [!GetAtt UsersTable.Arn, "/index/*"]]

functions:
  # オーソライザー関数
  authHandler:
    handler: src/handlers/auth.authorize
    environment:
      AUTH0_DOMAIN: ${env:AUTH0_DOMAIN}
      AUTH0_AUDIENCE: ${env:AUTH0_AUDIENCE}

  getMe:
    handler: src/handlers/users.get_me
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - http:
          path: api/users/me
          method: get
          cors: true
          authorizer:
            name: authHandler
            resultTtlInSeconds: 300  # 5分間キャッシュ
            identitySource: method.request.header.Authorization
            type: request

  createUser:
    handler: src/handlers/users.create_user
    environment:
      USERS_TABLE_NAME: ${self:custom.tableName.users}
    events:
      - http:
          path: api/users
          method: post
          cors: true
          authorizer:
            name: authHandler
            resultTtlInSeconds: 300
            identitySource: method.request.header.Authorization
            type: request

plugins:
  - serverless-prune-plugin
  - serverless-python-requirements
  - serverless-offline
  - serverless-dynamodb

custom:
  tableName:
    users: ${self:service}-users-${sls:stage}
    matches: ${self:service}-matches-${sls:stage}
  prune:
    automatic: true
    number: 3
  pythonRequirements:
    dockerizePip: true
  serverless-offline:
    httpPort: 3000
    useChildProcesses: false
    noPrependStageInUrl: true
    environment:
      IS_OFFLINE: true
  serverless-dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    seed:
      domain:
        sources:
          - table: ${self:custom.tableName.users}
            sources: [./migrations/users-seed.json]

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName.users}
        AttributeDefinitions:
          - AttributeName: user_id # Table Partition Key (Discord ID)
            AttributeType: S
          - AttributeName: auth0_sub # GSI Partition Key
            AttributeType: S
          # --- オプションのGSIで将来的に必要になる可能性のある属性定義 ---
          # - AttributeName: queue_status
          #   AttributeType: S
          # - AttributeName: rating
          #   AttributeType: N
          # ---------------------------------------------------------
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: Auth0SubIndex
            KeySchema:
              - AttributeName: auth0_sub
                KeyType: HASH
            Projection:
              ProjectionType: ALL # アプリケーションの要件に応じて 'KEYS_ONLY' や 'INCLUDE' も検討
            # ProvisionedThroughput や BillingMode は環境やコスト戦略に合わせて設定
            # 例: プロビジョニングスループットの場合 (開発環境では低めに設定)
            # ProvisionedThroughput:
            #   ReadCapacityUnits: 1
            #   WriteCapacityUnits: 1
        # テーブル自体のBillingMode (既存の設定を維持するか、新規に設定)
        BillingMode: PAY_PER_REQUEST # 現在の設定が PAY_PER_REQUEST なので、それを維持
