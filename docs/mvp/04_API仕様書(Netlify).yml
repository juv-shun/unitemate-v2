openapi: 3.0.0
info:
  title: Netlify Functions API
  version: 1.0.0
  description: |
    ユーザー認証連携のためのNetlify Functions。
    Netlify Identity経由でのDiscordログインの開始と、
    認証成功時のバックエンド(AWS Lambda)とのユーザーデータ同期を処理します。

servers:
  - url: /.netlify/functions
    description: Netlify Functions エンドポイント

components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: string
          description: ユーザーの一意な識別子（例：Netlify IdentityまたはカスタムID）。
        discordId:
          type: string
          description: ユーザーのDiscord ID。
        username:
          type: string
          description: ユーザーのDiscordユーザー名。
        # Discord/Netlify Identityから取得した他の関連ユーザーフィールドを追加
    Error:
      type: object
      properties:
        message:
          type: string
          description: エラーメッセージ。

  securitySchemes:
    netlifyIdentityJwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 認証済みリクエストのためのNetlify Identity JWT。

paths:
  /auth-discord-login:
    get:
      summary: Discordログイン開始
      description: |
        Netlify Identity経由でユーザーをDiscord認証にリダイレクトします。
        このエンドポイントは、フロントエンドからログインプロセスを開始するために呼び出されます。
      tags:
        - 認証
      responses:
        '302':
          description: Netlify IdentityのDiscord認証プロバイダーへリダイレクトします。
          headers:
            Location:
              schema:
                type: string
                example: /.netlify/identity/authorize?provider=discord
        '500':
          description: 内部サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth-callback:
    get:
      summary: 認証コールバックとユーザー同期
      description: |
        Discord認証成功後、Netlify Identityからのコールバックを処理します。
        この関数は通常、Netlify Identity自体、またはID連携フロー完了後にフロントエンドから呼び出されます。
        Netlify Identityからユーザー情報を取得し、ユーザーデータ同期のためにAWS Lambdaに送信し、
        その後セッション情報を返すか、ユーザーをリダイレクトすることがあります。
        簡単のため、この例ではNetlify IdentityがOAuthコールバックを処理し、クライアントにトークンを
        提供した後にフロントエンドが呼び出すエンドポイントであると想定しています。
        クライアントはその後、Netlify Identity JWTを使用してこの関数を呼び出します。
      tags:
        - 認証
      security:
        - netlifyIdentityJwt: []
      responses:
        '200':
          description: 認証成功、ユーザーデータはバックエンドと同期されました。
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 認証に成功し、ユーザーデータが処理されました。
                  user:
                    $ref: '#/components/schemas/User' # またはセッション用のユーザー情報のサブセット
        '401':
          description: 未認証（例：無効または欠落したNetlify Identity JWT）。
        '500':
          description: 内部サーバーエラー（例：Lambda通信失敗）。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /me:
    get:
      summary: 現在のユーザー情報を取得
      description: |
        現在認証されているユーザーの情報を取得します。
        有効なNetlify Identity JWTが必要です。
      tags:
        - ユーザー
      security:
        - netlifyIdentityJwt: []
      responses:
        '200':
          description: ユーザー情報の取得に成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: 未認証（例：無効または欠落したNetlify Identity JWT）。
        '404':
          description: ユーザーが見つかりません。
        '500':
          description: 内部サーバーエラー。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
