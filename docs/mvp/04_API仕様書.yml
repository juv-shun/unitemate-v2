openapi: 3.0.0
info:
  title: Unitemate backend API
  version: 1.1.0
  description: |-
    ユナメイトのバックエンドAPI仕様書

servers:
  - url: https://{api-gateway-id}.execute-api.{region}.amazonaws.com
    description: AWS API Gateway endpoint

components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: string
          description: "ユーザーのプライマリキー。DiscordのネイティブID。"
          example: "discord|123456789012345678"
        auth0_sub:
          type: string
          description: "Auth0のユーザー識別子。user_idと同じ値。GSIのキー。"
          example: "discord|123456789012345678"
        discord_username:
          type: string
          description: "Discordのユーザー名。"
          example: "my_discord_user"
        discord_discriminator:
          type: string
          nullable: true
          description: "Discordの識別子（#の後の数字）。新しいユーザー名形式ではnull。"
          example: "1234"
        discord_avatar_url:
          type: string
          format: uri
          description: "Discordのアバター画像のURL。"
          example: "https://cdn.discordapp.com/avatars/123456789012345678/a_hash.png"
        app_username:
          type: string
          description: "アプリケーション内で表示されるユーザー名。"
          example: "My App User"

        created_at:
          type: string
          format: date-time
          description: "ユーザー作成日時。"
        updated_at:
          type: string
          format: date-time
          description: "ユーザー最終更新日時。"

    Auth0UserProfile:
      type: object
      description: "Auth0から取得したユーザープロファイル情報。フロントエンドから送信される想定。"
      properties:
        sub:
          type: string
          description: "Auth0のユーザーID。"
          example: "discord|123456789012345678"
        nickname:
          type: string
          description: "Auth0のニックネーム（Discordの `username#discriminator` が入ることが多い）。"
          example: "my_discord_user#1234"
        name:
          type: string
          description: "Auth0の名前。"
          example: "my_discord_user"
        picture:
          type: string
          format: uri
          description: "Auth0のプロフィール画像URL（DiscordのアバターURL）。"
          example: "https://cdn.discordapp.com/avatars/123456789012345678/a_hash.png"
        updated_at:
          type: string
          format: date-time
          description: "Auth0プロファイルの最終更新日時。"

    Error:
      type: object
      properties:
        error:
          type: string
          description: エラーメッセージ。

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Auth0から取得したIDトークンをBearerトークンとして指定します。"

security:
  - BearerAuth: []

paths:
  /api/users/me:
    get:
      summary: ログインユーザー情報を取得
      description: "AuthorizationヘッダーのJWTからユーザーを特定し、DBからユーザー情報を取得します。"
      tags:
        - User
      responses:
        "200":
          description: ユーザー情報の取得成功。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: ユーザーが見つからない。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/users:
    post:
      summary: 新規ユーザーを作成
      description: "DBにユーザーが存在しない場合に、新しいユーザーを作成します。フロントエンドはAuth0から取得したユーザープロファイルをリクエストボディに含める必要があります。"
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Auth0UserProfile"
      responses:
        "201":
          description: ユーザーの作成成功。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "409":
          description: ユーザーは既に存在する。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
