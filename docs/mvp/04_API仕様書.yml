openapi: 3.0.0
info:
  title: Unitemate backend API
  version: 1.1.0
  description: |-
    ユナメイトのバックエンドAPI仕様書

servers:
  - url: https://{api-gateway-id}.execute-api.{region}.amazonaws.com
    description: AWS API Gateway endpoint

components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: string
          description: "ユーザーのプライマリキー。DiscordのネイティブID。"
          example: "discord|123456789012345678"
        auth0_sub:
          type: string
          description: "Auth0のユーザー識別子。user_idと同じ値。GSIのキー。"
          example: "discord|123456789012345678"
        discord_username:
          type: string
          description: "Discordのユーザー名。"
          example: "my_discord_user"
        discord_discriminator:
          type: string
          nullable: true
          description: "Discordの識別子（#の後の数字）。新しいユーザー名形式ではnull。"
          example: "1234"
        discord_avatar_url:
          type: string
          format: uri
          description: "Discordのアバター画像のURL。"
          example: "https://cdn.discordapp.com/avatars/123456789012345678/a_hash.png"
        app_username:
          type: string
          description: "アプリケーション内で表示されるユーザー名。"
          example: "My App User"
        trainer_name:
          type: string
          description: "トレーナー名。アプリケーション内で表示されるユーザー名。"
          example: "トレーナー太郎"
        twitter_id:
          type: string
          nullable: true
          description: "Twitter(X)のユーザーID。@マーク付き。"
          example: "@my_twitter_id"
        preferred_roles:
          type: array
          items:
            $ref: "#/components/schemas/PreferredRole"
          description: "希望ロールの配列。"
          example: ["TOP_LANE", "MIDDLE"]
        bio:
          type: string
          nullable: true
          description: "ひとこと。得意ポケモンや意気込みなど、自己紹介文。"
          example: "ガブリアス使いです！よろしくお願いします！"
        favorite_pokemon:
          type: array
          items:
            type: string
          nullable: true
          maxItems: 5
          description: "得意なポケモンのIDの配列。最大5つまで選択可能。"
          example: ["garchomp", "pikachu", "charizard"]
        rate:
          type: number
          description: "現在のレーティング。"
          example: 1500
        max_rate:
          type: number
          description: "最高レーティング。"
          example: 1600
        match_count:
          type: number
          description: "総試合数。"
          example: 10
        win_count:
          type: number
          description: "勝利数。"
          example: 7
        last_match_at:
          type: string
          format: date-time
          nullable: true
          description: "最終試合日時。ランキング集計の対象判定に利用。試合がない場合はnull。"
        created_at:
          type: string
          format: date-time
          description: "ユーザー作成日時。"
        updated_at:
          type: string
          format: date-time
          description: "ユーザー最終更新日時。"

    Auth0UserProfile:
      type: object
      description: "Auth0から取得したユーザープロファイル情報。フロントエンドから送信される想定。"
      properties:
        sub:
          type: string
          description: "Auth0のユーザーID。"
          example: "discord|123456789012345678"
        nickname:
          type: string
          description: "Auth0のニックネーム（Discordの `username#discriminator` が入ることが多い）。"
          example: "my_discord_user#1234"
        name:
          type: string
          description: "Auth0の名前。"
          example: "my_discord_user"
        picture:
          type: string
          format: uri
          description: "Auth0のプロフィール画像URL（DiscordのアバターURL）。"
          example: "https://cdn.discordapp.com/avatars/123456789012345678/a_hash.png"
        updated_at:
          type: string
          format: date-time
          description: "Auth0プロファイルの最終更新日時。"

    PreferredRole:
      type: string
      description: "希望ロール。"
      enum:
        - "TOP_LANE" # 上レーン
        - "TOP_STUDY" # 上学習
        - "MIDDLE" # 中央
        - "BOTTOM_LANE" # 下レーン
        - "BOTTOM_STUDY" # 下学習
      example: "TOP_LANE"

    CreateUserRequest:
      type: object
      description: "ユーザー作成リクエスト。Auth0情報とユーザー入力情報を組み合わせたもの。"
      required:
        - auth0_profile
        - trainer_name
      properties:
        auth0_profile:
          $ref: "#/components/schemas/Auth0UserProfile"
          description: "Auth0から取得したプロファイル情報。"
        trainer_name:
          type: string
          minLength: 1
          maxLength: 50
          description: "トレーナー名（必須）。アプリケーション内で表示される名前。"
          example: "トレーナー太郎"
        twitter_id:
          type: string
          nullable: true
          pattern: "^@[a-zA-Z0-9_]{1,15}$"
          description: "Twitter(X)のユーザーID（任意）。@マーク付きで1-15文字。"
          example: "@my_twitter_id"
        preferred_roles:
          type: array
          items:
            $ref: "#/components/schemas/PreferredRole"
          maxItems: 5
          description: "希望ロール（任意）。最大5個まで選択可能。"
          example: ["TOP_LANE", "MIDDLE"]
        bio:
          type: string
          nullable: true
          maxLength: 500
          description: "ひとこと（任意）。得意ポケモンや意気込みなど、自己紹介文。最大500文字。"
          example: "ガブリアス使いです！よろしくお願いします！"
        favorite_pokemon:
          type: array
          items:
            type: string
          nullable: true
          maxItems: 5
          description: "得意なポケモンのIDの配列（任意）。最大5つまで選択可能。"
          example: ["garchomp", "pikachu", "charizard"]

    UpdateUserRequest:
      type: object
      description: "ユーザー更新リクエスト。マイページから編集可能な項目のみを部分更新。"
      minProperties: 1
      properties:
        trainer_name:
          type: string
          minLength: 1
          maxLength: 50
          description: "トレーナー名（任意）。アプリケーション内で表示される名前。"
          example: "トレーナー太郎"
        twitter_id:
          type: string
          nullable: true
          pattern: "^@[a-zA-Z0-9_]{1,15}$"
          description: "Twitter(X)のユーザーID（任意）。@マーク付きで1-15文字。"
          example: "@my_twitter_id"
        preferred_roles:
          type: array
          items:
            $ref: "#/components/schemas/PreferredRole"
          maxItems: 5
          description: "希望ロール（任意）。最大5個まで選択可能。"
          example: ["TOP_LANE", "MIDDLE"]
        bio:
          type: string
          nullable: true
          maxLength: 500
          description: "ひとこと（任意）。得意ポケモンや意気込みなど、自己紹介文。最大500文字。"
          example: "ガブリアス使いです！よろしくお願いします！"
        favorite_pokemon:
          type: array
          items:
            type: string
          nullable: true
          maxItems: 5
          description: "得意なポケモンのIDの配列（任意）。最大5つまで選択可能。"
          example: ["garchomp", "pikachu", "charizard"]

    Error:
      type: object
      properties:
        error:
          type: string
          description: エラーメッセージ。

    RankingEntry:
      type: object
      description: ランキングエントリ（ユーザーのランキング表示用情報）。
      properties:
        rank:
          type: integer
          description: 1始まりの順位。
          example: 1
        user_id:
          type: string
          description: ユーザーのプライマリキー。DiscordのネイティブID。
          example: "discord|123456789012345678"
        trainer_name:
          type: string
          description: 表示名（トレーナー名）。
          example: "トレーナー太郎"
        twitter_id:
          type: string
          nullable: true
          description: Twitter(X)のユーザーID。@付き。
          example: "@my_twitter_id"
        discord_username:
          type: string
          description: Discordのユーザー名。
          example: "my_discord_user"
        discord_avatar_url:
          type: string
          format: uri
          description: Discordのアバター画像URL。
          example: "https://cdn.discordapp.com/avatars/123456789012345678/a_hash.png"
        rate:
          type: number
          description: 現在のレーティング。
          example: 1550
        max_rate:
          type: number
          description: 最高レーティング。
          example: 1600
        match_count:
          type: number
          description: 総試合数。
          example: 15
        win_count:
          type: number
          description: 勝利数。
          example: 10
        last_match_at:
          type: string
          format: date-time
          nullable: true
          description: 最終試合日時。アクティブ判定に利用。
      required:
        - rank
        - user_id
        - trainer_name
        - rate


  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Auth0から取得したIDトークンをBearerトークンとして指定します。"

security:
  - BearerAuth: []

paths:
  /api/users/me:
    get:
      summary: ログインユーザー情報を取得
      description: "AuthorizationヘッダーのJWTからユーザーを特定し、DBから詳細なユーザー情報を取得します。トレーナー名、希望ロール、ひとこと等の全ての項目を含みます。"
      tags:
        - User
      responses:
        "200":
          description: ユーザー情報の取得成功。すべてのユーザー項目を含む詳細な情報を返却。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                complete_user:
                  summary: 完全なユーザー情報の例
                  value:
                    user_id: "discord|123456789012345678"
                    auth0_sub: "discord|123456789012345678"
                    discord_username: "my_discord_user"
                    discord_discriminator: "1234"
                    discord_avatar_url: "https://cdn.discordapp.com/avatars/123456789012345678/a_hash.png"
                    app_username: "My App User"
                    trainer_name: "トレーナー太郎"
                    twitter_id: "@my_twitter_id"
                    preferred_roles: ["TOP_LANE", "MIDDLE"]
                    bio: "ガブリアス使いです！よろしくお願いします！"
                    favorite_pokemon: ["garchomp", "pikachu", "charizard"]
                    rate: 1550
                    max_rate: 1600
                    match_count: 15
                    win_count: 10
                    last_match_at: "2024-01-20T13:00:00Z"
                    created_at: "2024-01-15T10:30:00Z"
                    updated_at: "2024-01-20T14:45:00Z"
        "404":
          description: ユーザーが見つからない。未登録ユーザーの場合。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                user_not_found:
                  summary: 未登録ユーザーエラーの例
                  value:
                    error: "ユーザーが見つかりません。ユーザー作成画面へ遷移してください。"
        "401":
          description: 認証エラー。JWTトークンが無効または期限切れ。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                unauthorized:
                  summary: 認証エラーの例
                  value:
                    error: "認証が必要です。再度ログインしてください。"
        "500":
          description: サーバー内部エラー。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                server_error:
                  summary: サーバーエラーの例
                  value:
                    error: "サーバー内部エラーが発生しました。しばらく時間をおいて再度お試しください。"

    patch:
      summary: ログインユーザー情報を更新
      description: "マイページから編集可能な項目（トレーナー名、Twitter ID、希望ロール、ひとこと）を部分更新します。Discord由来の情報は更新できません。"
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: 更新成功。更新後のユーザー情報を返却。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: リクエストが無効。バリデーションエラーなど。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                validation_error:
                  summary: バリデーションエラーの例
                  value:
                    error: "Twitter IDは@マーク付きで1-15文字で入力してください。"
        "404":
          description: ユーザーが見つからない。未登録ユーザーの場合。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                user_not_found:
                  summary: 未登録ユーザーエラーの例
                  value:
                    error: "ユーザーが見つかりません。ユーザー作成画面へ遷移してください。"
        "401":
          description: 認証エラー。JWTトークンが無効または期限切れ。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                unauthorized:
                  summary: 認証エラーの例
                  value:
                    error: "認証が必要です。再度ログインしてください。"
        "500":
          description: サーバー内部エラー。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                server_error:
                  summary: サーバーエラーの例
                  value:
                    error: "サーバー内部エラーが発生しました。しばらく時間をおいて再度お試しください。"

  /api/users:
    post:
      summary: 新規ユーザーを作成
      description: "ユーザー作成画面からの入力情報とAuth0プロファイル情報を組み合わせて、新しいユーザーを作成します。トレーナー名は必須項目です。"
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: ユーザーの作成成功。作成されたユーザー情報を返却。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: リクエストが無効。バリデーションエラーなど。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                validation_error:
                  summary: バリデーションエラーの例
                  value:
                    error: "トレーナー名は必須です。"
                twitter_format_error:
                  summary: Twitter ID形式エラーの例
                  value:
                    error: "Twitter IDは@マーク付きで1-15文字で入力してください。"
        "409":
          description: ユーザーは既に存在する。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                user_exists:
                  summary: ユーザー重複エラーの例
                  value:
                    error: "このアカウントは既に登録されています。"
        "401":
          description: 認証エラー。JWTトークンが無効または期限切れ。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                unauthorized:
                  summary: 認証エラーの例
                  value:
                    error: "認証が必要です。再度ログインしてください。"
        "500":
          description: サーバー内部エラー。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                server_error:
                  summary: サーバーエラーの例
                  value:
                    error: "サーバー内部エラーが発生しました。しばらく時間をおいて再度お試しください。"

  /api/rankings:
    get:
      summary: ランキング一覧を取得（公開）
      description: |-
        レート降順でユーザーのランキング一覧を返します。認証不要の公開APIです。
        並び順は `rate` 降順、同率の場合は `max_rate` 降順、さらに同一の場合は `last_match_at` の新しい順をタイブレークとします。
      tags:
        - Ranking
      security: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 200
          description: 取得件数の上限（最大200、既定200）。
        - in: query
          name: active_within_days
          schema:
            type: integer
            minimum: 1
          required: false
          description: 直近N日以内に試合があるユーザーに絞り込み（`last_match_at` 基準）。指定しない場合は全ユーザーが対象。
      responses:
        "200":
          description: ランキング一覧の取得成功。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RankingEntry"
              examples:
                top10_example:
                  summary: 上位のランキング例
                  value:
                    - rank: 1
                      user_id: "discord|111111111111111111"
                      trainer_name: "エース1号"
                      discord_username: "ace_user"
                      discord_avatar_url: "https://cdn.discordapp.com/avatars/111111111111111111/a_hash.png"
                      rate: 1780
                      max_rate: 1820
                      match_count: 120
                      win_count: 75
                      last_match_at: "2024-07-20T12:34:56Z"
                    - rank: 2
                      user_id: "discord|222222222222222222"
                      trainer_name: "エース2号"
                      discord_username: "ace_user2"
                      discord_avatar_url: "https://cdn.discordapp.com/avatars/222222222222222222/b_hash.png"
                      rate: 1760
                      max_rate: 1800
                      match_count: 98
                      win_count: 60
                      last_match_at: "2024-07-19T09:00:00Z"
        "400":
          description: リクエストが無効。パラメータ不正など。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                validation_error:
                  summary: バリデーションエラーの例
                  value:
                    error: "limitは1〜200の範囲で指定してください。"
        "500":
          description: サーバー内部エラー。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                server_error:
                  summary: サーバーエラーの例
                  value:
                    error: "サーバー内部エラーが発生しました。しばらく時間をおいて再度お試しください。"
